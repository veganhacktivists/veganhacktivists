// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @db.VarChar(30)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(30)
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  User
  Admin
}

model User {
  id            String    @id @default(cuid()) @db.VarChar(30)
  role          UserRole  @default(User)
  name          String?
  pronouns      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  playgroudRequests      PlaygroundRequest[]
  playgroundApplications PlaygroundApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum RequestStatus {
  Pending
  Accepted
  Rejected
  Completed
}

enum ApplicationStatus {
  Pending
  Accepted
  Rejected
  Blocked
}

enum TimePerWeek {
  OneToThree
  ThreeToFive
  FiveToEight
  TenPlus
}

enum Source {
  SearchEngine
  Reddit
  SocialMediaPost
  EmailPodcastAds
  WordOfMouth
  WebsiteOrBlog
  None
}

enum PlaygroundRequestOrganizationType {
  Activism
  Profit
}

enum BudgetType {
  Fixed
  Hourly
  Monthly
}

model Budget {
  id        String     @id @default(cuid()) @db.VarChar(30)
  quantity  Decimal    @db.Money
  type      BudgetType
  requestId String     @unique

  request PlaygroundRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model PlaygroundApplication {
  id                   String            @id @default(cuid()) @db.VarChar(30)
  providedEmail        String
  applicantId          String
  name                 String
  pronouns             String?
  availableTimePerWeek TimePerWeek
  estimatedTimeDays    Int?
  source               Source?
  portfolioLink        String
  twitterUrl           String?
  instagramUrl         String?
  linkedinUrl          String?
  hasAppliedInThePast  Boolean
  isVegan              Boolean
  calendlyUrl          String?
  moreInfo             String
  requestId            String
  status               ApplicationStatus @default(Pending)

  applicant User              @relation(fields: [applicantId], references: [id])
  request   PlaygroundRequest @relation(fields: [requestId], references: [id])

  feedbackRequested Boolean? @default(false)

  acceptedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([requestId, applicantId])
}

enum PlaygroundRequestCategory {
  Developer
  Designer
  Writer
  Editor
  Researcher
  Marketer
  Social
  DataScientist
  Security
  Other
}

enum PlaygroundRequestDesignRequestType {
  Logo
  SocialMedia
  Branding
  DonorDocuments
  UserInterface
  Illustration
  Animation
  Miscellaneous
  Other
}

model DiscordMessage {
  messageId           String @db.Char(19)
  channelId           String @db.Char(19)
  playgroundRequestId String

  request PlaygroundRequest? @relation(fields: [playgroundRequestId], references: [id])

  @@id([messageId, channelId])
}

model PlaygroundRequest {
  id                      String                             @id @default(cuid()) @db.VarChar(30)
  phone                   String?
  name                    String
  pronouns                String?
  providedEmail           String
  organization            String?
  organizationType        PlaygroundRequestOrganizationType?
  organizationDescription String?
  website                 String
  calendlyUrl             String
  title                   String                             @db.VarChar(200)
  requiredSkills          String[]                           @default([])
  neededVolunteers        Int                                @default(1)
  description             String                             @db.Text
  dueDate                 DateTime?                          @db.Date
  estimatedTimeDays       Int? // TODO: remvoe
  requesterId             String
  status                  RequestStatus                      @default(Pending)
  category                PlaygroundRequestCategory

  discordMessages DiscordMessage[]
  requester       User                    @relation(fields: [requesterId], references: [id])
  applications    PlaygroundApplication[]
  budget          Budget?

  devRequestWebsiteExists          Boolean?
  devRequestWebsiteUrl             String?
  designRequestType                PlaygroundRequestDesignRequestType?
  designRequestCurrentDesignExists Boolean?

  lastManuallyPushed                  DateTime?
  noApplicationsNotificationEmailSent Boolean   @default(false)

  acceptedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DataDashboardData {
  id                     String                @id @default(cuid()) @db.VarChar(30)
  timestamp              DateTime              @default(now())
  category               String?
  subcategory            String?
  values                 DataDashboardValue[]
  DataDashboardProject   DataDashboardProject? @relation(fields: [dataDashboardProjectId], references: [id])
  dataDashboardProjectId String?               @db.VarChar(30)
}

enum DashboardValueType {
  clicks
  comments
}

model DataDashboardValue {
  id                  String             @id @default(cuid()) @db.VarChar(30)
  key                 DashboardValueType
  value               String?
  DataDashboardData   DataDashboardData? @relation(fields: [dataDashboardDataId], references: [id])
  dataDashboardDataId String?            @db.VarChar(30)
}

model DataDashboardProject {
  id    String              @id @default(cuid()) @db.VarChar(30)
  label String              @unique
  data  DataDashboardData[]
}

// Cache for a translated field of a contentful entry
model ContentfulTranslationCache {
  contentfulId     String   @db.VarChar(64)
  fieldId          String
  locale           String
  contentType      String
  translatedHTML   String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  originalHTMLHash String   @db.Char(64)

  @@id(name: "id", [contentfulId, fieldId, locale])
}
