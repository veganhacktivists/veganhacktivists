on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
      tags:
        description: "Test scenario tags"

env:
  AWS_REGISTRY: ${{ secrets.AWS_PRIVATE_REGISTRY }}
  AWS_REPOSITORY: vh-site-registry-repository
  IMAGE_NAME: vh-site-stg
  CF_SPACE_ID: ${{ secrets.CF_SPACE_ID }}
  CF_DELIVERY_ACCESS_TOKEN: ${{ secrets.CF_DELIVERY_ACCESS_TOKEN }}
  CF_PREVIEW_ACCESS_TOKEN: ${{ secrets.CF_PREVIEW_ACCESS_TOKEN }}
  CF_ENVIRONMENT: master
  MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
  PATREON_ACCESS_TOKEN: ${{ secrets.PATREON_ACCESS_TOKEN }}
  PATREON_CAMPAIGN_ID: ${{ secrets.PATREON_CAMPAIGN_ID }}
  GOOGLE_TAG_MANAGER_CONTAINER_ID: ${{ secrets.GOOGLE_TAG_MANAGER_CONTAINER_ID }}
  MAILCHIMP_AUDIENCE_ID: ${{ secrets.MAILCHIMP_AUDIENCE_ID }}
  MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
  MAILCHIMP_SERVER_ID: ${{ secrets.MAILCHIMP_SERVER_ID }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  EMAIL_SERVER_URL: ${{ secrets.EMAIL_SERVER_URL }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_REGISTRY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_REGISTRY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build container image
        run: |
          docker build -t $AWS_REGISTRY/$AWS_REPOSITORY:$IMAGE_NAME --build-arg CF_SPACE_ID=$CF_SPACE_ID --build-arg CF_DELIVERY_ACCESS_TOKEN=$CF_DELIVERY_ACCESS_TOKEN --build-arg CF_PREVIEW_ACCESS_TOKEN=$CF_PREVIEW_ACCESS_TOKEN --build-arg CF_ENVIRONMENT=$CF_ENVIRONMENT --build-arg PATREON_ACCESS_TOKEN=$PATREON_ACCESS_TOKEN --build-arg PATREON_CAMPAIGN_ID=$PATREON_CAMPAIGN_ID --build-arg GOOGLE_TAG_MANAGER_CONTAINER_ID=$GOOGLE_TAG_MANAGER_CONTAINER_ID --build-arg DATABASE_URL=$DATABASE_URL .
          docker push $AWS_REGISTRY/$AWS_REPOSITORY:$IMAGE_NAME

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_REGISTRY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_REGISTRY }}
          aws-region: us-east-2

      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          KEY: ${{ secrets.SSH_SECRET_KEY }}
          envs: IMAGE_NAME,AWS_REGISTRY,AWS_REPOSITORY,GITHUB_SHA,COMMAND,CF_SPACE_ID,CF_DELIVERY_ACCESS_TOKEN,CF_PREVIEW_ACCESS_TOKEN,CF_ENVIRONMENT,MAILGUN_API_KEY,PATREON_ACCESS_TOKEN,PATREON_CAMPAIGN_ID,GOOGLE_TAG_MANAGER_CONTAINER_ID,MAILCHIMP_AUDIENCE_ID,MAILCHIMP_API_KEY,MAILCHIMP_SERVER_ID,DATABASE_URL,EMAIL_SERVER_URL,NEXTAUTH_SECRET
          script: |
            aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 182016694564.dkr.ecr.us-east-2.amazonaws.com
            docker pull ${AWS_REGISTRY}/${AWS_REPOSITORY}:${IMAGE_NAME}
            docker stop $IMAGE_NAME
            docker rm $IMAGE_NAME
            docker run -d \
            --restart always \
            --env CF_SPACE_ID=$CF_SPACE_ID \
            --env CF_DELIVERY_ACCESS_TOKEN=$CF_DELIVERY_ACCESS_TOKEN \
            --env CF_PREVIEW_ACCESS_TOKEN=$CF_PREVIEW_ACCESS_TOKEN \
            --env CF_ENVIRONMENT=$CF_ENVIRONMENT \
            --env MAILGUN_API_KEY=$MAILGUN_API_KEY \
            --env PATREON_ACCESS_TOKEN=$PATREON_ACCESS_TOKEN \
            --env PATREON_CAMPAIGN_ID=$PATREON_CAMPAIGN_ID \
            --env NEXT_PUBLIC_GOOGLE_TAG_MANAGER_CONTAINER_ID=$GOOGLE_TAG_MANAGER_CONTAINER_ID \
            --env MAILCHIMP_AUDIENCE_ID=$MAILCHIMP_AUDIENCE_ID \
            --env MAILCHIMP_API_KEY=$MAILCHIMP_API_KEY \
            --env MAILCHIMP_SERVER_ID=$MAILCHIMP_SERVER_ID \
            --env DATABASE_URL=$DATABASE_URL \
            --env EMAIL_SERVER_URL=$EMAIL_SERVER_URL \
            --env NEXTAUTH_SECRET=$NEXTAUTH_SECRET \
            --label traefik.enable=true \
            --label traefik.docker.network=traefik-public \
            --label traefik.http.middlewares.https-redirect.redirectscheme.scheme=https \
            --label traefik.http.middlewares.https-redirect.redirectscheme.permanent=true \
            --label traefik.http.routers.app-http.middlewares=https-redirect \
            --label traefik.http.routers.app-http.rule=Host\(\`veganhacktivists.org\`\) \
            --label traefik.http.routers.app-http.entrypoints=http \
            --label traefik.http.routers.app-https.rule=Host\(\`veganhacktivists.org\`\) \
            --label traefik.http.routers.app-https.tls.certresolver=le \
            --label traefik.http.routers.app-https.tls=true \
            --label traefik.http.routers.app-https.entrypoints=https \
            --label traefik.http.services.app.loadbalancer.server.port=80 \
            --network=traefik-public \
            --name $IMAGE_NAME ${AWS_REGISTRY}/${AWS_REPOSITORY}:${IMAGE_NAME}
